{"version":3,"sources":["DominoCounter/DominoDotCounter.js","App.js","serviceWorker.js","index.js"],"names":["DominoDotCounter","props","count","handleTakePhoto","dataUri","setState","photo","countDots","srcMat","cv","imread","dstMat","clone","contours","MatVector","heirarchy","Mat","searchableContours","dotsVec","cvtColor","COLOR_RGBA2GRAY","GaussianBlur","Size","Canny","findContours","RETR_LIST","CHAIN_APPROX_NONE","i","size","num","contourArea","get","denom","arcLength","ratio","Math","abs","sqrt","PI","push_back","moment","moments","cx","m10","m00","cy","m01","foundDuplicate","j","moment2","cx2","cy2","closeX","closeY","diameter","drawContours","Scalar","document","getElementById","innerText","imshow","state","this","showResult","isImageMirror","idealFacingMode","isMaxResolution","onTakePhoto","alt","id","src","onLoad","style","position","left","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd51a264.chunk.js","sourcesContent":["import React from \"react\";\nimport 'react-html5-camera-photo/build/css/index.css';\nimport Camera from 'react-html5-camera-photo';\n\n/*global cv*/\n\nclass DominoDotCounter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            photo: \"\",\n        };\n    }\n    count = -1;\n\n    handleTakePhoto = (dataUri) => {\n        this.setState({\n            photo: dataUri,\n        });\n    };\n\n    countDots = () => {\n        let srcMat = cv.imread(\"imgSrc\");        \n        let dstMat = srcMat.clone();\n\n        let contours = new cv.MatVector();\n        let heirarchy = new cv.Mat();\n        let searchableContours = new cv.MatVector();\n        let dotsVec = new cv.MatVector();\n\n        cv.cvtColor(srcMat, srcMat, cv.COLOR_RGBA2GRAY);\n        cv.GaussianBlur(srcMat, srcMat, new cv.Size(3, 3), 2, 2);\n        cv.Canny(srcMat, srcMat, 25, 75, 3);\n\n        cv.findContours(\n            srcMat,\n            contours,\n            heirarchy,\n            cv.RETR_LIST,\n            cv.CHAIN_APPROX_NONE\n        );\n\n        for (let i = 0; i < contours.size(); i++) {\n            let num = cv.contourArea(contours.get(i));\n            let denom = cv.arcLength(contours.get(i), false);\n            let ratio = Math.abs(denom/num)\n            if (\n                cv.contourArea(contours.get(i)) > 50 &&\n                (\n\n\n                Math.abs(\n                    Math.sqrt(cv.contourArea(contours.get(i)) / Math.PI) * 2 * Math.PI -\n                    cv.arcLength(contours.get(i), false)\n                ) < 8\n\n                &&\n\n\n                ratio-25 < 5)\n            ) {\n                searchableContours.push_back(contours.get(i));\n            }\n        }\n\n        for (let i = 0; i < searchableContours.size(); i++) {\n            let moment = cv.moments(searchableContours.get(i));\n            let cx = moment.m10 / moment.m00;\n            let cy = moment.m01 / moment.m00;\n            let foundDuplicate = false;\n            for (let j = (i+1 % searchableContours.size()); j < searchableContours.size(); j++) {\n                let moment2 = cv.moments(searchableContours.get(j));\n                let cx2 = moment2.m10 / moment2.m00;\n                let cy2 = moment2.m01 / moment2.m00;\n                let closeX = Math.abs(cx - cx2) + 0.0001;\n                let closeY = Math.abs(cy - cy2) + 0.0001;\n\n                let diameter =  Math.sqrt(cv.contourArea(contours.get(i)) / Math.PI) * 2\n\n                if ((closeX > 0 && closeX < diameter && closeY > 0 && closeY < diameter)) {\n                    foundDuplicate = true;\n                    break;\n                }\n            }\n            if (!foundDuplicate) {\n                dotsVec.push_back(searchableContours.get(i));\n            }\n        }\n\n        \n        this.count = dotsVec.size();\n        for (let i = 0; i < dotsVec.size(); i++) {\n            let moment = cv.moments(dotsVec.get(i));\n            let cx = moment.m10 / moment.m00;\n            let cy = moment.m01 / moment.m00;\n            \n            \n            let foundDuplicate = false;\n            for (let j = (i+1 % dotsVec.size()); j < dotsVec.size(); j++) {\n                let moment2 = cv.moments(dotsVec.get(j));\n                let cx2 = moment2.m10 / moment2.m00;\n                let cy2 = moment2.m01 / moment2.m00;\n                if (cx-cx2 < 1 && cy-cy2 < 1) {\n                    foundDuplicate = true;\n                    this.count--;\n                }\n                \n            }\n            cv.drawContours(dstMat, dotsVec, i, new cv.Scalar((i%3 === 0 ? 1:0) * 255, (i % 3 === 1 ? 1:0) * 255, (i % 3 === 2 ? 1:0) * 255, 255), 2);\n            \n            \n        }\n\n\n        document.getElementById(\"result\").innerText = this.count;\n\n        cv.imshow(\"imgDst\", dstMat);\n    };\n\n    render() {\n        if (this.props.showResult) {\n            cv.imshow(\"imgDst\");\n        }\n        return (\n            <div>\n                <Camera isImageMirror={false} idealFacingMode={\"environment\"} isMaxResolution={true} onTakePhoto={(dataUri) => { this.handleTakePhoto(dataUri) }} />\n                <img\n                    alt=\"hidden\"\n                    id={\"imgSrc\"}\n                    src={this.state.photo}\n                    onLoad={this.countDots}\n                    style={{ position: \"absolute\", left: \"-1000%\" }}\n                ></img>\n                <div>\n                    (0.23) Amount: <div id=\"result\"></div>\n                </div>\n                <div id=\"debug\"></div>\n                <canvas id={\"imgDst\"} />\n            </div>\n        );\n    }\n}\n\nexport default DominoDotCounter;","import React from 'react';\nimport DominoDotCounter from './DominoCounter/DominoDotCounter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DominoDotCounter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}